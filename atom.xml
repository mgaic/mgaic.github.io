<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-07-16T10:10:04.664Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>某音six分析记录</title>
    <link href="http://example.com/2024/07/16/%E6%9F%90%E9%9F%B3six%E5%88%86%E6%9E%90%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2024/07/16/%E6%9F%90%E9%9F%B3six%E5%88%86%E6%9E%90%E8%AE%B0%E5%BD%95/</id>
    <published>2024-07-16T08:25:35.000Z</published>
    <updated>2024-07-16T10:10:04.664Z</updated>
    
    <content type="html"><![CDATA[<h4 id="hook-hashMap-put-函数"><a href="#hook-hashMap-put-函数" class="headerlink" title="hook hashMap put 函数"></a>hook hashMap put 函数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function hookMap()&#123;</span><br><span class="line">    var hashMap = Java.use(&quot;java.util.HashMap&quot;);</span><br><span class="line">    hashMap.put.implementation = function (a, b) &#123;</span><br><span class="line">        //a==&quot;username&quot;和a.equals(&quot;username&quot;)一般都可以</span><br><span class="line">        //如果不行换一下即可</span><br><span class="line">        // console.log(&quot;a&quot;, a);</span><br><span class="line">        // if (a == &quot;x-tt-token&quot;) &#123;</span><br><span class="line">        if (a == &quot;X-Medusa&quot;) &#123;</span><br><span class="line">        // if (a.indexOf(&quot;medusa&quot;) != -1) &#123;</span><br><span class="line">            console.log(&quot;hashMap.put: &quot;, a, b);</span><br><span class="line">            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Exception&quot;).$new()));</span><br><span class="line">        &#125;</span><br><span class="line">     return this.put(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果如下"><a href="#结果如下" class="headerlink" title="结果如下"></a>结果如下</h4><p><img src="/images/img_13.png" alt="img_1.png"></p><h4 id="hook-fCw试试-看看在调用该函数的时候-六神是否已经生成"><a href="#hook-fCw试试-看看在调用该函数的时候-六神是否已经生成" class="headerlink" title="hook fCw试试, 看看在调用该函数的时候, 六神是否已经生成"></a>hook fCw试试, 看看在调用该函数的时候, 六神是否已经生成</h4><h4 id="hook-代码如下"><a href="#hook-代码如下" class="headerlink" title="hook 代码如下"></a>hook 代码如下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function hook_intercept()&#123;</span><br><span class="line">    let C112070fCw = Java.use(&quot;X.fCw&quot;);</span><br><span class="line">    C112070fCw[&quot;intercept&quot;].implementation = function (chain) &#123;</span><br><span class="line">        console.log(`C112070fCw.intercept is called: chain=$&#123;chain.request().url()&#125;`);</span><br><span class="line">        console.log(`C112070fCw.intercept is called: chain headers =$&#123;chain.request().headers()&#125;`);</span><br><span class="line">        let result = this[&quot;intercept&quot;](chain);</span><br><span class="line">        // console.log(`C112070fCw.intercept result=$&#123;result&#125;`);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="hook-结果如下"><a href="#hook-结果如下" class="headerlink" title="hook 结果如下"></a>hook 结果如下</h4><p><img src="/images/img_14.png" alt="img_1.png"></p><h4 id="可以看到此处六神已经拿到了，-继续往上游函数摸索"><a href="#可以看到此处六神已经拿到了，-继续往上游函数摸索" class="headerlink" title="可以看到此处六神已经拿到了， 继续往上游函数摸索."></a>可以看到此处六神已经拿到了， 继续往上游函数摸索.</h4><h4 id="hook-fct函数试试，-hookfct函数发现headers-中没有-six"><a href="#hook-fct函数试试，-hookfct函数发现headers-中没有-six" class="headerlink" title="hook fct函数试试， hookfct函数发现headers 中没有 six"></a>hook fct函数试试， hookfct函数发现headers 中没有 six</h4><h4 id="jadx打开看看"><a href="#jadx打开看看" class="headerlink" title="jadx打开看看"></a>jadx打开看看</h4><p><img src="/images/img_15.png" alt="img_1.png"></p><h4 id="看看response-fct函数以后-headers有没有增加six-字段"><a href="#看看response-fct函数以后-headers有没有增加six-字段" class="headerlink" title="看看response fct函数以后, headers有没有增加six 字段"></a>看看response fct函数以后, headers有没有增加six 字段</h4><h4 id="hook脚本如下"><a href="#hook脚本如下" class="headerlink" title="hook脚本如下"></a>hook脚本如下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function hook_intercept()&#123;</span><br><span class="line">    let C112070fCw = Java.use(&quot;X.fCt&quot;);</span><br><span class="line">    var origin_chain = null;</span><br><span class="line">    C112070fCw[&quot;intercept&quot;].implementation = function (chain) &#123;</span><br><span class="line">        origin_chain = chain;</span><br><span class="line">        console.log(`C112070fCw.intercept is called: chain=$&#123;chain.request().url()&#125;`);</span><br><span class="line">        console.log(`C112070fCw.intercept is called: chain headers =$&#123;chain.request().headers()&#125;`);</span><br><span class="line">        let result = this[&quot;intercept&quot;](chain);</span><br><span class="line">        // console.log(`C112070fCw.intercept result=$&#123;result&#125;`);</span><br><span class="line">        console.log(&quot;after call function &quot;, result.request().headers());</span><br><span class="line">        return result;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果如下-1"><a href="#结果如下-1" class="headerlink" title="结果如下"></a>结果如下</h4><p><img src="/images/img_16.png" alt="img_1.png"></p><h4 id="可以看到-经过-fCt-以后，six就出来了-重点看看-fCt-tryAddSecurityFactor-很可疑-hook-看看-要注意Map强转HashMap-否则打印出来的就是-Obejct"><a href="#可以看到-经过-fCt-以后，six就出来了-重点看看-fCt-tryAddSecurityFactor-很可疑-hook-看看-要注意Map强转HashMap-否则打印出来的就是-Obejct" class="headerlink" title="可以看到 经过 fCt 以后，six就出来了. 重点看看 fCt, tryAddSecurityFactor 很可疑, hook 看看, 要注意Map强转HashMap, 否则打印出来的就是 Obejct"></a>可以看到 经过 fCt 以后，six就出来了. 重点看看 fCt, tryAddSecurityFactor 很可疑, hook 看看, 要注意Map强转HashMap, 否则打印出来的就是 Obejct</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let NetworkParams = Java.use(&quot;com.bytedance.frameworks.baselib.network.http.NetworkParams&quot;);</span><br><span class="line">var HashMap = Java.use(&#x27;java.util.HashMap&#x27;);</span><br><span class="line">NetworkParams[&quot;tryAddSecurityFactor&quot;].implementation = function (str, map) &#123;</span><br><span class="line">    console.log(`NetworkParams.tryAddSecurityFactor is called: str=$&#123;str&#125;, map=$&#123;map&#125;`);</span><br><span class="line">    let result = this[&quot;tryAddSecurityFactor&quot;](str, map);</span><br><span class="line">    console.log(`NetworkParams.tryAddSecurityFactor result=$&#123;result&#125;`);</span><br><span class="line">    console.log(`NetworkParams.tryAddSecurityFactor result=$&#123;Java.cast(result, HashMap).toString()&#125;`);</span><br><span class="line">    return result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="hook-结果如下-可以看到-six已经生成了"><a href="#hook-结果如下-可以看到-six已经生成了" class="headerlink" title="hook 结果如下, 可以看到 six已经生成了"></a>hook 结果如下, 可以看到 six已经生成了</h4><p><img src="/images/img_17.png" alt="img_1.png"></p><h4 id="jadx继续看看-发现调用了-onCallToAddSecurityFactor-进去看看实现-发现是个接口"><a href="#jadx继续看看-发现调用了-onCallToAddSecurityFactor-进去看看实现-发现是个接口" class="headerlink" title="jadx继续看看 发现调用了 onCallToAddSecurityFactor, 进去看看实现, 发现是个接口"></a>jadx继续看看 发现调用了 onCallToAddSecurityFactor, 进去看看实现, 发现是个接口</h4><p><img src="/images/img_18.png" alt="img_1.png"></p><h4 id="查看交叉引用看看"><a href="#查看交叉引用看看" class="headerlink" title="查看交叉引用看看"></a>查看交叉引用看看</h4><p><img src="/images/img_19.png" alt="img_1.png"></p><h4 id="进入以后-发现调用了-l-a-hook-试试看"><a href="#进入以后-发现调用了-l-a-hook-试试看" class="headerlink" title="进入以后 发现调用了 l.a, hook 试试看"></a>进入以后 发现调用了 l.a, hook 试试看</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(function ()&#123;</span><br><span class="line">    let l = Java.use(&quot;ms.bd.c.l&quot;);</span><br><span class="line">    let result = null;</span><br><span class="line">    l[&quot;a&quot;].implementation = function (i, i2, j, str, obj) &#123;</span><br><span class="line">        result = this[&quot;a&quot;](i, i2, j, str, obj);</span><br><span class="line">        if(i == 50331649)&#123;</span><br><span class="line">            console.log(&quot;result &quot;, Java.use(&#x27;org.json.JSONArray&#x27;).$new(result))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="结果如下-2"><a href="#结果如下-2" class="headerlink" title="结果如下"></a>结果如下</h4><p><img src="/images/img_20.png" alt="img_1.png"></p><h4 id="剩下的就是-frida-rpc了。-但实际测试-frida-rpc-几十次后就不返回数据了-风控很强。"><a href="#剩下的就是-frida-rpc了。-但实际测试-frida-rpc-几十次后就不返回数据了-风控很强。" class="headerlink" title="剩下的就是 frida rpc了。 但实际测试, frida rpc 几十次后就不返回数据了. 风控很强。"></a>剩下的就是 frida rpc了。 但实际测试, frida rpc 几十次后就不返回数据了. 风控很强。</h4><h3 id="待续…"><a href="#待续…" class="headerlink" title="待续…"></a>待续…</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;hook-hashMap-put-函数&quot;&gt;&lt;a href=&quot;#hook-hashMap-put-函数&quot; class=&quot;headerlink&quot; title=&quot;hook hashMap put 函数&quot;&gt;&lt;/a&gt;hook hashMap put 函数&lt;/h4&gt;&lt;figu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ecapture 基于ebpf抓包</title>
    <link href="http://example.com/2024/07/15/%E5%9F%BA%E4%BA%8Eebpf%E6%8A%93%E5%8C%85/"/>
    <id>http://example.com/2024/07/15/%E5%9F%BA%E4%BA%8Eebpf%E6%8A%93%E5%8C%85/</id>
    <published>2024-07-15T07:30:53.000Z</published>
    <updated>2024-07-15T07:37:42.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用ecapture-抓包某物app-亲测可行"><a href="#使用ecapture-抓包某物app-亲测可行" class="headerlink" title="使用ecapture 抓包某物app, 亲测可行"></a>使用ecapture 抓包某物app, 亲测可行</h2><h4 id="ecapture-版本-0-8-3-手机-红米note-12t-pro-内核版本-5-10-android版本-android-13"><a href="#ecapture-版本-0-8-3-手机-红米note-12t-pro-内核版本-5-10-android版本-android-13" class="headerlink" title="ecapture 版本 0.8.3, 手机 红米note 12t pro, 内核版本 5.10. android版本 android 13"></a>ecapture 版本 0.8.3, 手机 红米note 12t pro, 内核版本 5.10. android版本 android 13</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb push ecapture /data/loca.tmp</span><br><span class="line">chmod +x ecapture</span><br><span class="line">./ecapture tls</span><br></pre></td></tr></table></figure><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p>可以看到请求 响应都在里面了</p><p><img src="/images/img_10.png" alt="img_1.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用ecapture-抓包某物app-亲测可行&quot;&gt;&lt;a href=&quot;#使用ecapture-抓包某物app-亲测可行&quot; class=&quot;headerlink&quot; title=&quot;使用ecapture 抓包某物app, 亲测可行&quot;&gt;&lt;/a&gt;使用ecapture 抓包某物a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>stackplz trace 使用</title>
    <link href="http://example.com/2024/07/12/stackplz-trace/"/>
    <id>http://example.com/2024/07/12/stackplz-trace/</id>
    <published>2024-07-12T06:31:11.000Z</published>
    <updated>2024-07-15T06:28:58.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用-stackplz-过anti-frida"><a href="#使用-stackplz-过anti-frida" class="headerlink" title="使用 stackplz 过anti-frida"></a>使用 stackplz 过anti-frida</h2><h4 id="一般检测frida-比较常用的一个函数是-strstr-这个函数类似于-isSubString-判断子串"><a href="#一般检测frida-比较常用的一个函数是-strstr-这个函数类似于-isSubString-判断子串" class="headerlink" title="一般检测frida 比较常用的一个函数是 strstr. 这个函数类似于 isSubString. 判断子串"></a>一般检测frida 比较常用的一个函数是 strstr. 这个函数类似于 isSubString. 判断子串</h4><h4 id="我们使用-stackplz-hook-strstr-看看是谁在调用strstr"><a href="#我们使用-stackplz-hook-strstr-看看是谁在调用strstr" class="headerlink" title="我们使用 stackplz hook strstr 看看是谁在调用strstr"></a>我们使用 stackplz hook strstr 看看是谁在调用strstr</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./stackplz -n tv.danmaku.bili -l /apex/com.android.runtime/lib64/bionic/libc.so -w strstr --stack</span><br></pre></td></tr></table></figure><h4 id="执行结果如下"><a href="#执行结果如下" class="headerlink" title="执行结果如下"></a>执行结果如下</h4><p><img src="/images/img_2.png" alt="img_1.png"></p><h4 id="看看strstr的参数-到底是不是针对一些环境的检测"><a href="#看看strstr的参数-到底是不是针对一些环境的检测" class="headerlink" title="看看strstr的参数, 到底是不是针对一些环境的检测"></a>看看strstr的参数, 到底是不是针对一些环境的检测</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/stackplz -n tv.danmaku.bili -l /apex/com.android.runtime/lib64/bionic/libc.so -w strstr[str:x0,str:x1]  -o tmp.log</span><br></pre></td></tr></table></figure><h4 id="结果如下"><a href="#结果如下" class="headerlink" title="结果如下"></a>结果如下</h4><p><img src="/images/img_3.png" alt="img_1.png"></p><h4 id="google-一搜"><a href="#google-一搜" class="headerlink" title="google 一搜"></a>google 一搜</h4><p><img src="/images/img_4.png" alt="img_1.png"></p><h4 id="大概率就是-libmxxxoxxdsec-so-在检测frida"><a href="#大概率就是-libmxxxoxxdsec-so-在检测frida" class="headerlink" title="大概率就是 libmxxxoxxdsec.so 在检测frida"></a>大概率就是 libmxxxoxxdsec.so 在检测frida</h4><h4 id="从hook-strstr的调用堆栈里我们可以看到是从-thread-start-开始的。-所以我们hook-thread-create-看看-创建线程比较早，所以先关掉app-执行命令后再打开app"><a href="#从hook-strstr的调用堆栈里我们可以看到是从-thread-start-开始的。-所以我们hook-thread-create-看看-创建线程比较早，所以先关掉app-执行命令后再打开app" class="headerlink" title="从hook strstr的调用堆栈里我们可以看到是从 thread_start 开始的。 所以我们hook thread_create 看看, 创建线程比较早，所以先关掉app, 执行命令后再打开app"></a>从hook strstr的调用堆栈里我们可以看到是从 thread_start 开始的。 所以我们hook thread_create 看看, 创建线程比较早，所以先关掉app, 执行命令后再打开app</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./stackplz -n tv.danmaku.bili -l /apex/com.android.runtime/lib64/bionic/libc.so -w pthread_create --stack -o tmp.log</span><br></pre></td></tr></table></figure><h4 id="可以看到结果-有13处"><a href="#可以看到结果-有13处" class="headerlink" title="可以看到结果, 有13处"></a>可以看到结果, 有13处</h4><p><img src="/images/img_5.png" alt="img_1.png"></p><h4 id="ida打开-看看-0x1d304"><a href="#ida打开-看看-0x1d304" class="headerlink" title="ida打开 看看 0x1d304"></a>ida打开 看看 0x1d304</h4><p><img src="/images/img_6.png" alt="img_1.png"></p><h4 id="F5-看看"><a href="#F5-看看" class="headerlink" title="F5 看看"></a>F5 看看</h4><p><img src="/images/img_7.png" alt="img_1.png"></p><p>这里很像是在创建线程。 我们试试patch, 强行让它不创建。 把 BLR X19 指令改为 nop. 在此之前还有一个问题， patch后会不会崩溃？<br>arm64 函数调用约定 返回值给x0, 我们看看后续有没有用到x0. 如果没用到我们可以这么改, 用到了程序可能就会崩溃</p><h4 id="看汇编"><a href="#看汇编" class="headerlink" title="看汇编"></a>看汇编</h4><p><img src="/images/img_8.png" alt="img_1.png"></p><h4 id="发现并没有用到返回值。-所以我们打开-https-armconverter-com"><a href="#发现并没有用到返回值。-所以我们打开-https-armconverter-com" class="headerlink" title="发现并没有用到返回值。 所以我们打开 https://armconverter.com/"></a>发现并没有用到返回值。 所以我们打开 <a href="https://armconverter.com/">https://armconverter.com/</a></h4><p>看看nop 对应的机器码</p><p><img src="/images/img_9.png" alt="img_1.png"></p><p>用 010editor 把 BL X19 对应的机器码全部改为 1F2003D5</p><h4 id="我一共patch了三处-然后把patch后的-so文件-push-到-data-app-1m1hzMqd9svUirtnyTGHvA-tv-xxxxx-xxxx-rMRttoSdjUufKzwDHC3FtQ-lib-arm64"><a href="#我一共patch了三处-然后把patch后的-so文件-push-到-data-app-1m1hzMqd9svUirtnyTGHvA-tv-xxxxx-xxxx-rMRttoSdjUufKzwDHC3FtQ-lib-arm64" class="headerlink" title="我一共patch了三处. 然后把patch后的 so文件 push 到 &#x2F;data&#x2F;app&#x2F;~~1m1hzMqd9svUirtnyTGHvA&#x3D;&#x3D;&#x2F;tv.xxxxx.xxxx-rMRttoSdjUufKzwDHC3FtQ&#x3D;&#x3D;&#x2F;lib&#x2F;arm64&#x2F;"></a>我一共patch了三处. 然后把patch后的 so文件 push 到 &#x2F;data&#x2F;app&#x2F;~~1m1hzMqd9svUirtnyTGHvA&#x3D;&#x3D;&#x2F;tv.xxxxx.xxxx-rMRttoSdjUufKzwDHC3FtQ&#x3D;&#x3D;&#x2F;lib&#x2F;arm64&#x2F;</h4><h4 id="然后frida-打开还是崩溃-发现app-又用了其他另外一个地方的-sec-so文件-把-so文件复制到两个目录下以后。发现frida-可以成功附加-最好改一下so文件的权限为-755-跟原先一致"><a href="#然后frida-打开还是崩溃-发现app-又用了其他另外一个地方的-sec-so文件-把-so文件复制到两个目录下以后。发现frida-可以成功附加-最好改一下so文件的权限为-755-跟原先一致" class="headerlink" title="然后frida 打开还是崩溃. 发现app 又用了其他另外一个地方的 sec.so文件. 把 so文件复制到两个目录下以后。发现frida 可以成功附加.  最好改一下so文件的权限为 755. 跟原先一致"></a>然后frida 打开还是崩溃. 发现app 又用了其他另外一个地方的 sec.so文件. 把 so文件复制到两个目录下以后。发现frida 可以成功附加.  最好改一下so文件的权限为 755. 跟原先一致</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用-stackplz-过anti-frida&quot;&gt;&lt;a href=&quot;#使用-stackplz-过anti-frida&quot; class=&quot;headerlink&quot; title=&quot;使用 stackplz 过anti-frida&quot;&gt;&lt;/a&gt;使用 stackplz 过anti</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2024/07/12/hello-world/"/>
    <id>http://example.com/2024/07/12/hello-world/</id>
    <published>2024-07-12T03:22:17.370Z</published>
    <updated>2024-07-12T03:22:17.370Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
